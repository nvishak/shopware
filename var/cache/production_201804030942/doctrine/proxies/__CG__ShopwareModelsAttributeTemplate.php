<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Attribute;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Template extends \Shopware\Models\Attribute\Template implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'templateId', 'attr1', 'attr2', 'attr3', 'attr4', 'attr5', 'attr6', 'attr7', 'attr8', 'attr9', 'attr10', 'attr11', 'attr12', 'attr13', 'attr14', 'attr15', 'attr16', 'attr17', 'attr18', 'attr19', 'attr20', 'template'];
        }

        return ['__isInitialized__', 'id', 'templateId', 'attr1', 'attr2', 'attr3', 'attr4', 'attr5', 'attr6', 'attr7', 'attr8', 'attr9', 'attr10', 'attr11', 'attr12', 'attr13', 'attr14', 'attr15', 'attr16', 'attr17', 'attr18', 'attr19', 'attr20', 'template'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Template $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplateId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplateId', []);

        return parent::getTemplateId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplateId($templateId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplateId', [$templateId]);

        return parent::setTemplateId($templateId);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr1', []);

        return parent::getAttr1();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr1($attr1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr1', [$attr1]);

        return parent::setAttr1($attr1);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr2', []);

        return parent::getAttr2();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr2($attr2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr2', [$attr2]);

        return parent::setAttr2($attr2);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr3', []);

        return parent::getAttr3();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr3($attr3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr3', [$attr3]);

        return parent::setAttr3($attr3);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr4', []);

        return parent::getAttr4();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr4($attr4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr4', [$attr4]);

        return parent::setAttr4($attr4);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr5', []);

        return parent::getAttr5();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr5($attr5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr5', [$attr5]);

        return parent::setAttr5($attr5);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr6()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr6', []);

        return parent::getAttr6();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr6($attr6)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr6', [$attr6]);

        return parent::setAttr6($attr6);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr7()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr7', []);

        return parent::getAttr7();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr7($attr7)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr7', [$attr7]);

        return parent::setAttr7($attr7);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr8()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr8', []);

        return parent::getAttr8();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr8($attr8)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr8', [$attr8]);

        return parent::setAttr8($attr8);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr9()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr9', []);

        return parent::getAttr9();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr9($attr9)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr9', [$attr9]);

        return parent::setAttr9($attr9);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr10()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr10', []);

        return parent::getAttr10();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr10($attr10)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr10', [$attr10]);

        return parent::setAttr10($attr10);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr11()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr11', []);

        return parent::getAttr11();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr11($attr11)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr11', [$attr11]);

        return parent::setAttr11($attr11);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr12()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr12', []);

        return parent::getAttr12();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr12($attr12)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr12', [$attr12]);

        return parent::setAttr12($attr12);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr13()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr13', []);

        return parent::getAttr13();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr13($attr13)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr13', [$attr13]);

        return parent::setAttr13($attr13);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr14()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr14', []);

        return parent::getAttr14();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr14($attr14)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr14', [$attr14]);

        return parent::setAttr14($attr14);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr15()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr15', []);

        return parent::getAttr15();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr15($attr15)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr15', [$attr15]);

        return parent::setAttr15($attr15);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr16()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr16', []);

        return parent::getAttr16();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr16($attr16)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr16', [$attr16]);

        return parent::setAttr16($attr16);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr17()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr17', []);

        return parent::getAttr17();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr17($attr17)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr17', [$attr17]);

        return parent::setAttr17($attr17);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr18()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr18', []);

        return parent::getAttr18();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr18($attr18)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr18', [$attr18]);

        return parent::setAttr18($attr18);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr19()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr19', []);

        return parent::getAttr19();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr19($attr19)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr19', [$attr19]);

        return parent::setAttr19($attr19);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr20()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr20', []);

        return parent::getAttr20();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr20($attr20)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr20', [$attr20]);

        return parent::setAttr20($attr20);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplate', []);

        return parent::getTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplate($template)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplate', [$template]);

        return parent::setTemplate($template);
    }

    /**
     * {@inheritDoc}
     */
    public function fromArray(array $array = array (
), array $fillable = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromArray', [$array, $fillable]);

        return parent::fromArray($array, $fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToOne($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToOne', [$data, $model, $property, $reference]);

        return parent::setOneToOne($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToMany($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToMany', [$data, $model, $property, $reference]);

        return parent::setOneToMany($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setManyToOne($data, $model, $property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManyToOne', [$data, $model, $property]);

        return parent::setManyToOne($data, $model, $property);
    }

}
