<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Attribute;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CustomerBilling extends \Shopware\Models\Attribute\CustomerBilling implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'customerBillingId', 'text1', 'text2', 'text3', 'text4', 'text5', 'text6', 'customerBilling'];
        }

        return ['__isInitialized__', 'id', 'customerBillingId', 'text1', 'text2', 'text3', 'text4', 'text5', 'text6', 'customerBilling'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CustomerBilling $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerBillingId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerBillingId', []);

        return parent::getCustomerBillingId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomerBillingId($customerBillingId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomerBillingId', [$customerBillingId]);

        return parent::setCustomerBillingId($customerBillingId);
    }

    /**
     * {@inheritDoc}
     */
    public function getText1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText1', []);

        return parent::getText1();
    }

    /**
     * {@inheritDoc}
     */
    public function setText1($text1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText1', [$text1]);

        return parent::setText1($text1);
    }

    /**
     * {@inheritDoc}
     */
    public function getText2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText2', []);

        return parent::getText2();
    }

    /**
     * {@inheritDoc}
     */
    public function setText2($text2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText2', [$text2]);

        return parent::setText2($text2);
    }

    /**
     * {@inheritDoc}
     */
    public function getText3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText3', []);

        return parent::getText3();
    }

    /**
     * {@inheritDoc}
     */
    public function setText3($text3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText3', [$text3]);

        return parent::setText3($text3);
    }

    /**
     * {@inheritDoc}
     */
    public function getText4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText4', []);

        return parent::getText4();
    }

    /**
     * {@inheritDoc}
     */
    public function setText4($text4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText4', [$text4]);

        return parent::setText4($text4);
    }

    /**
     * {@inheritDoc}
     */
    public function getText5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText5', []);

        return parent::getText5();
    }

    /**
     * {@inheritDoc}
     */
    public function setText5($text5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText5', [$text5]);

        return parent::setText5($text5);
    }

    /**
     * {@inheritDoc}
     */
    public function getText6()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText6', []);

        return parent::getText6();
    }

    /**
     * {@inheritDoc}
     */
    public function setText6($text6)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText6', [$text6]);

        return parent::setText6($text6);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerBilling()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerBilling', []);

        return parent::getCustomerBilling();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomerBilling($customerBilling)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomerBilling', [$customerBilling]);

        return parent::setCustomerBilling($customerBilling);
    }

    /**
     * {@inheritDoc}
     */
    public function fromArray(array $array = array (
), array $fillable = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromArray', [$array, $fillable]);

        return parent::fromArray($array, $fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToOne($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToOne', [$data, $model, $property, $reference]);

        return parent::setOneToOne($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToMany($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToMany', [$data, $model, $property, $reference]);

        return parent::setOneToMany($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setManyToOne($data, $model, $property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManyToOne', [$data, $model, $property]);

        return parent::setManyToOne($data, $model, $property);
    }

}
