<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Attribute;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class OrderBasket extends \Shopware\Models\Attribute\OrderBasket implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'orderBasketId', 'attribute1', 'attribute2', 'attribute3', 'attribute4', 'attribute5', 'attribute6', 'orderBasket'];
        }

        return ['__isInitialized__', 'id', 'orderBasketId', 'attribute1', 'attribute2', 'attribute3', 'attribute4', 'attribute5', 'attribute6', 'orderBasket'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (OrderBasket $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderBasketId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderBasketId', []);

        return parent::getOrderBasketId();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderBasketId($orderBasketId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderBasketId', [$orderBasketId]);

        return parent::setOrderBasketId($orderBasketId);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute1', []);

        return parent::getAttribute1();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute1($attribute1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute1', [$attribute1]);

        return parent::setAttribute1($attribute1);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute2', []);

        return parent::getAttribute2();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute2($attribute2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute2', [$attribute2]);

        return parent::setAttribute2($attribute2);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute3', []);

        return parent::getAttribute3();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute3($attribute3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute3', [$attribute3]);

        return parent::setAttribute3($attribute3);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute4', []);

        return parent::getAttribute4();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute4($attribute4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute4', [$attribute4]);

        return parent::setAttribute4($attribute4);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute5', []);

        return parent::getAttribute5();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute5($attribute5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute5', [$attribute5]);

        return parent::setAttribute5($attribute5);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute6()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute6', []);

        return parent::getAttribute6();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute6($attribute6)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute6', [$attribute6]);

        return parent::setAttribute6($attribute6);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderBasket()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderBasket', []);

        return parent::getOrderBasket();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderBasket($orderBasket)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderBasket', [$orderBasket]);

        return parent::setOrderBasket($orderBasket);
    }

    /**
     * {@inheritDoc}
     */
    public function fromArray(array $array = array (
), array $fillable = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromArray', [$array, $fillable]);

        return parent::fromArray($array, $fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToOne($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToOne', [$data, $model, $property, $reference]);

        return parent::setOneToOne($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToMany($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToMany', [$data, $model, $property, $reference]);

        return parent::setOneToMany($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setManyToOne($data, $model, $property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManyToOne', [$data, $model, $property]);

        return parent::setManyToOne($data, $model, $property);
    }

}
